---
import type { CollectionEntry } from "astro:content";
import BaseHead from "@components/BaseHead.astro";
import Footer from "@components/Footer.astro";
import FormattedDate from "@components/FormattedDate.astro";
import Header from "@components/Header.astro";
import ScrollProgress from "@components/ScrollProgress.astro";

import type { MarkdownHeading } from "astro";
import type { HeadingHierarchy } from "@components/TOC.astro";
import TOC from "@components/TOC.astro";

import "@styles/toc.css";

import "remark-github-alerts/styles/github-colors-light.css";
import "remark-github-alerts/styles/github-colors-dark-class.css";
import "remark-github-alerts/styles/github-base.css";

type Props = CollectionEntry<"blog">["data"] & { headings: MarkdownHeading[] };

const { title, description, pubDate, updatedDate, heroImage, headings } =
    Astro.props as Props;

function createHeadingHierarchy(headings: MarkdownHeading[]) {
    const topLevelHeadings: HeadingHierarchy[] = [];

    headings.forEach((heading) => {
        if (heading.depth > 3) {
            return;
        }
        if (heading.depth < 2) {
            return;
        }
        const h = {
            ...heading,
            subheadings: [],
        };

        if (h.depth === 2) {
            topLevelHeadings.push(h);
        } else {
            let parent = topLevelHeadings[topLevelHeadings.length - 1];
            if (parent) {
                parent.subheadings.push(h);
            }
        }
    });

    return topLevelHeadings;
}

const toc: HeadingHierarchy[] = createHeadingHierarchy(headings ?? []);
const hasToC = toc.length > 1;
---

<html lang="en">
    <head>
        <BaseHead title={title} description={description} />
        <style>
            main {
                width: calc(100% - 2em);
                max-width: 100%;
                margin: 0;
            }
            .hero-image img {
                width: 960px;
                display: block;
                margin: 0 auto;
                border-radius: 12px;
                box-shadow: var(--box-shadow);
            }
            .prose {
                width: var(--width);
                max-width: calc(100% - 2em);
                margin: auto;
                padding: 1em;
                color: var(--text);
            }
            .title {
                margin-bottom: 1em;
                padding: 1em 0;
                text-align: center;
                line-height: 1;
            }
            .title h1 {
                margin: 0 0 0.5em 0;
            }
            .date {
                margin-bottom: 0.5em;
                color: var(--gray);
            }
            .last-updated-on {
                font-style: italic;
            }
        </style>
    </head>

    <body>
        <Header />
        <div class="toc" id="toc">
            {
                hasToC && (
                    <nav>
                        {toc.map((heading) => (
                            <TOC heading={heading} />
                        ))}
                    </nav>
                )
            }
        </div>
        <main data-pagefind-body>
            <article>
                <div class="hero-image" data-pagefind-ignore>
                    {
                        heroImage && (
                            <img
                                width={800}
                                height={400}
                                data-pagefind-meta="image[src]"
                                src={heroImage}
                                alt=""
                            />
                        )
                    }
                </div>
                <div class="prose">
                    <div class="title">
                        <div class="date">
                            <FormattedDate date={pubDate} />
                            {
                                updatedDate && (
                                    <div class="last-updated-on">
                                        Last updated on{" "}
                                        <FormattedDate date={updatedDate} />
                                    </div>
                                )
                            }
                        </div>
                        <h1>{title}</h1>
                        <hr />
                    </div>
                    <slot />
                </div>
            </article>
        </main>
        <Footer />
        <ScrollProgress />
        <script>
            import "@scripts/toc-display.ts";
        </script>
    </body>
</html>
